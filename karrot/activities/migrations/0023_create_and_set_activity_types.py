# Generated by Django 3.0.9 on 2020-08-16 20:47

from django.db import migrations

activity_types = {
    'Meeting': {
        'colour': 'AD1457',
        'icon': 'fas fa-handshake',
        'feedback_icon': 'fas fa-reply',
        'has_feedback': True,
        'has_feedback_weight': False,
    },
    'Pickup': {
        'colour': '007700',
        'icon': 'fas fa-shopping-basket',
        'feedback_icon': 'fas fa-balance-scale',
        'has_feedback': True,
        'has_feedback_weight': True,
    },
    'Distribution': {
        'colour': '1976D2',
        'icon': 'fas fa-people-carry',
        'feedback_icon': 'fas fa-reply',
        'has_feedback': True,
        'has_feedback_weight': False,
    },
    'Event': {
        'colour': 'EF6C00',
        'icon': 'fas fa-calendar-check',
        'feedback_icon': 'fas fa-reply',
        'has_feedback': True,
        'has_feedback_weight': False,
    },
    'Activity': {
        'colour': '283593',
        'icon': 'fas fa-asterisk',
        'feedback_icon': 'fas fa-reply',
        'has_feedback': True,
        'has_feedback_weight': False,
    },
}

activity_types_for_theme = {
    'foodsaving': [name for name in activity_types.keys() if name != 'Activity'],
    'general': ['Meeting', 'Event', 'Activity'],
    'bikekitchen': ['Meeting', 'Event', 'Activity'],
}

set_existing_activities_for_theme = {
    'foodsaving': 'Pickup',
    'general': 'Activity',
    'bikekitchen': 'Activity',
}


def set_initial_activity_type(apps, schema_editor):
    Group = apps.get_model('groups', 'Group')
    ActivityType = apps.get_model('activities', 'ActivityType')
    Activity = apps.get_model('activities', 'Activity')
    ActivitySeries = apps.get_model('activities', 'ActivitySeries')

    for group in Group.objects.all():

        for name in activity_types_for_theme[group.theme]:
            options = activity_types[name]
            ActivityType.objects.get_or_create(
                group=group,
                name=name,
                defaults=options,
            )

        set_to_activity_type = group.activity_types.get(name=set_existing_activities_for_theme[group.theme])

        Activity.objects.filter(place__group=group).update(activity_type=set_to_activity_type.id)
        ActivitySeries.objects.filter(place__group=group).update(activity_type=set_to_activity_type.id)


class Migration(migrations.Migration):
    dependencies = [
        ('activities', '0022_add_activity_types'),
    ]

    operations = [
        migrations.RunPython(set_initial_activity_type, reverse_code=migrations.RunPython.noop, elidable=True),
    ]
