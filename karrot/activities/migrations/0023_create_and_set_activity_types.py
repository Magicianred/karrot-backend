# Generated by Django 3.0.9 on 2020-08-16 20:47

from django.db import migrations


def set_initial_activity_type(apps, schema_editor):
    Group = apps.get_model('groups', 'Group')
    ActivityType = apps.get_model('activities', 'ActivityType')
    Activity = apps.get_model('activities', 'Activity')
    ActivitySeries = apps.get_model('activities', 'ActivitySeries')

    for group in Group.objects.all():

        # "task" type for all groups
        set_to_activity_type, _ = ActivityType.objects.get_or_create(
            group=group,
            name='Task',
            defaults={
                'name_is_default': True,
                'colour': '283593',
                'icon': 'fas fa-check-square',
                'feedback_icon': 'fas fa-reply',
                'has_feedback': True,
                'has_feedback_weight': False,
            },
        )

        # "meeting" type for all groups too
        ActivityType.objects.get_or_create(
            group=group,
            name='Meeting',
            defaults={
                'name_is_default': True,
                'colour': 'AD1457',
                'icon': 'fas fa-handshake',
                'feedback_icon': 'fa-reply',
                'has_feedback': True,
                'has_feedback_weight': False,
            },
        )

        if group.theme == 'foodsaving':
            # "pickup" type only for foodsaving groups
            set_to_activity_type, _ = ActivityType.objects.get_or_create(
                group=group,
                name='Pickup',
                defaults={
                    'name_is_default': True,
                    'colour': '007700',
                    'icon': 'fas fa-shopping-basket',
                    'feedback_icon': 'fas fa-balance-scale',
                    'has_feedback': True,
                    'has_feedback_weight': True,
                },
            )

        Activity.objects.filter(place__group=group).update(typus=set_to_activity_type.id)
        ActivitySeries.objects.filter(place__group=group).update(typus=set_to_activity_type.id)


class Migration(migrations.Migration):
    dependencies = [
        ('activities', '0022_add_activity_types'),
    ]

    operations = [
        migrations.RunPython(set_initial_activity_type, reverse_code=migrations.RunPython.noop, elidable=True),
    ]
